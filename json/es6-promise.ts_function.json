{
  "resolve<R>~85015": {
    "descr": "Make a new promise from the thenable. \nA thenable is promise-like in as far as it has a \"then\" method.",
    "signature": "resolve<R>(value?: R | Thenable<R>): Promise<R>",
    "returnType": "Promise<R>",
    "returnDescr": null,
    "params": [
      {
        "name": "value",
        "dataType": "R | Thenable<R>",
        "descr": "",
        "isOptional": true
      }
    ]
  },
  "reject~87339": {
    "descr": "Make a promise that rejects to obj. For consistency and debugging (eg stack traces),obj should be an instanceof Error",
    "signature": "reject(error: any): Promise<any>",
    "returnType": "Promise<any>",
    "returnDescr": null,
    "params": [
      {
        "name": "error",
        "dataType": "any",
        "descr": "",
        "isOptional": false
      }
    ]
  },
  "all<R>~47572": {
    "descr": "Make a promise that fulfills when every item in the array fulfills,and rejects if (and when) any item rejects. \nthe array passed to all can be a mixture of promise-like objects and other objects. \nThe fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.",
    "signature": "all<R>(promises: (R | Thenable<R>)[]): Promise<R[]>",
    "returnType": "Promise<R[]>",
    "returnDescr": null,
    "params": [
      {
        "name": "promises",
        "dataType": "(R | Thenable<R>",
        "descr": "",
        "isOptional": false
      }
    ]
  },
  "race<R>~10579": {
    "descr": "Make a Promise that fulfills when any item fulfills,and rejects if any item rejects.",
    "signature": "race<R>(promises: (R | Thenable<R>)[]): Promise<R>",
    "returnType": "Promise<R>",
    "returnDescr": null,
    "params": [
      {
        "name": "promises",
        "dataType": "(R | Thenable<R>",
        "descr": "",
        "isOptional": false
      }
    ]
  }
}