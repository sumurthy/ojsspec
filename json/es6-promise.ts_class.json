{
  "Promise": {
    "implementsExtendsName": "Thenable<R>",
    "genericType": "R",
    "descr": "",
    "properties": {},
    "functions": {},
    "methods": {
      "constructor~3EGg9": {
        "accessModifier": "public",
        "signature": "constructor(callback: (resolve: (value?: R | Thenable<R>) => void,reject: (error?: any) => void) => void)",
        "isStatic": false,
        "isOptional": false,
        "descr": "Any errors thrown in the constructor callback will be implicitly passed to reject(). \nIf you call resolve in the body of the callback passed to the constructor, \nyour promise is fulfilled with result object passed to resolve. \nIf you call reject your promise is rejected with the object passed to resolve. \nFor consistency and debugging (eg stack traces), obj should be an instanceof Error. \nAny errors thrown in the constructor callback will be implicitly passed to reject().",
        "genericType": null,
        "returnType": "any => void) => void)",
        "returnDescr": "",
        "params": [
          {
            "name": "callback",
            "dataType": "(resolve: (value?: R | Thenable<R>) => void",
            "isOptional": false,
            "descr": ""
          },
          {
            "name": "reject",
            "dataType": "(error?: any) => void) => void",
            "isOptional": false,
            "descr": ""
          }
        ]
      },
      "then<U>~6quY9": {
        "accessModifier": "public",
        "signature": "then<U>(onFulfilled?: (value: R) => U | Thenable<U>,onRejected?: (error: any) => void): Promise<U>",
        "isStatic": false,
        "isOptional": false,
        "descr": " \nonFulfilled is called when/if \"promise\" resolves. onRejected is called when/if \"promise\" rejects. \nBoth are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called. \nBoth callbacks have a single parameter , the fulfillment value or rejection reason. \n\"then\" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve. \nIf an error is thrown in the callback, the returned promise rejects with that error. \n",
        "genericType": "U",
        "returnType": "Promise<U>",
        "returnDescr": "",
        "params": [
          {
            "name": "onFulfilled",
            "dataType": "(value: R) => U | Thenable<U>",
            "isOptional": true,
            "descr": "called when/if \"promise\" resolves \nonFulfilled is called when/if \"promise\" resolves. onRejected is called when/if \"promise\" rejects. \nBoth are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called. \nBoth callbacks have a single parameter , the fulfillment value or rejection reason. \n\"then\" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve. \nIf an error is thrown in the callback, the returned promise rejects with that error. \n"
          },
          {
            "name": "onRejected",
            "dataType": "(error: any) => void",
            "isOptional": true,
            "descr": "called when/if \"promise\" rejects \nonFulfilled is called when/if \"promise\" resolves. onRejected is called when/if \"promise\" rejects. \nBoth are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called. \nBoth callbacks have a single parameter , the fulfillment value or rejection reason. \n\"then\" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve. \nIf an error is thrown in the callback, the returned promise rejects with that error. \n"
          }
        ]
      },
      "catch<U>~KEfU9": {
        "accessModifier": "public",
        "signature": "catch<U>(onRejected?: (error: any) => U | Thenable<U>): Promise<U>",
        "isStatic": false,
        "isOptional": false,
        "descr": " \nSugar for promise.then(undefined, onRejected) \n",
        "genericType": "U",
        "returnType": "Promise<U>",
        "returnDescr": "",
        "params": [
          {
            "name": "onRejected",
            "dataType": "(error: any) => U | Thenable<U>",
            "isOptional": true,
            "descr": "called when/if \"promise\" rejects \nSugar for promise.then(undefined, onRejected) \n"
          }
        ]
      }
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  }
}