{
  "IClientSideWebPartStatusRenderer": {
    "extendsName": null,
    "descr": "error messages for a webpart.",
    "properties": {},
    "functions": {},
    "objects": {},
    "methods": {
      "clearError": {
        "descr": "Clear the webpart error message.",
        "genericType": null,
        "returnType": "void",
        "isOptional": false,
        "returnDesc": null,
        "params": [
          {
            "name": "domElement",
            "dataType": "HTMLElement",
            "descr": "",
            "isOptional": false
          }
        ]
      },
      "clearLoadingIndicator": {
        "descr": "Clear the loading indicator.",
        "genericType": null,
        "returnType": "void",
        "isOptional": false,
        "returnDesc": null,
        "params": [
          {
            "name": "domElement",
            "dataType": "Element",
            "descr": "",
            "isOptional": false
          }
        ]
      },
      "displayLoadingIndicator": {
        "descr": "Display a loading spinner.",
        "genericType": null,
        "returnType": "void",
        "isOptional": false,
        "returnDesc": null,
        "params": [
          {
            "name": "domElement",
            "dataType": "Element",
            "descr": "",
            "isOptional": false
          },
          {
            "name": "loadingMessage",
            "dataType": "string",
            "descr": "",
            "isOptional": false
          }
        ]
      },
      "renderError": {
        "descr": "Render the provided error message in the webpart container div.",
        "genericType": null,
        "returnType": "void",
        "isOptional": false,
        "returnDesc": null,
        "params": [
          {
            "name": "domElement",
            "dataType": "HTMLElement",
            "descr": "",
            "isOptional": false
          },
          {
            "name": "error",
            "dataType": "Error | string",
            "descr": "",
            "isOptional": false
          }
        ]
      }
    }
  },
  "IHtmlProperties": {
    "extendsName": null,
    "descr": "Structure of the data that a webpart developer can return on the onBeforeSerialize() API. \nThe outcome contains 3 kay/value dictionaries for properties that need to be search indexed. \nBoth keys and values are expected to be strings and will be HTML encoded during serialization. \n \n{ \nsearchableProperties: { 'prop1': 'value_of_prop1' }, \nlinkProperties: { 'prop2': 'http://www.contoso.com/page1.aspx' }, \nimageLinkPropertes: { 'prop3': 'http://www.contoso.com/imag.png' } \n} \n \nThis input would get translated to the following HTML string. \n \n\"<div data-sp-prop-name='prop1'>value1</div> \n<link data-sp-prop-name='prop2' href='http://www.contoso.com/page1.aspx'> \n<img data-sp-prop-name='prop2' href='http://www.contoso.com/image.png'>\" \n",
    "properties": {},
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IOdataList": {
    "extendsName": null,
    "descr": "Represents an OData SP.List object. For more information about this object \nsee the MSDN documentation here: \nhttps://msdn.microsoft.com/en-us/library/office/jj860569.aspx",
    "properties": {
      "BaseTemplate:": {
        "descr": "",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "Created:": {
        "descr": "Example: \"/Date(1453294804000)/\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "CurrentChangeToken:": {
        "descr": "Example: \"/Date(1453294804000)/\"",
        "dataType": "IODataChangeToken",
        "isOptional": false,
        "isCollection": false
      },
      "Description:": {
        "descr": "Example: \"/Date(1453294804000)/\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "EntityTypeName:": {
        "descr": "Example: \"MyListTitleList\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "Hidden:": {
        "descr": "Example: \"MyListTitleList\"",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "Id:": {
        "descr": "Example: \"/Guid(9fb9199b-65f2-4a4a-b597-11d1a44422c1)/\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "LastItemDeletedDate:": {
        "descr": "Example: \"/Date(1453294809000)/\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "LastItemModifiedDate:": {
        "descr": "Example: \"/Date(1453294809000)/\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "ListItemEntityTypeFullName:": {
        "descr": "Example: \"SP.Data.MyListTitleListItem\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "ParentWebUrl:": {
        "descr": "Example: \"/sites/PubSite\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "TemplateFeatureId:": {
        "descr": "Example: \"/Guid(22a9ef51-737b-4ff2-9346-694633fe4416)/\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "Title:": {
        "descr": "Example: \"Pages\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IOdataListItem": {
    "extendsName": null,
    "descr": "Represents an OData SP.ListItem object. For more information about this object \nsee the MSDN documentation here: \nhttps://msdn.microsoft.com/en-us/library/office/jj860569.aspx",
    "properties": {
      "ID:": {
        "descr": "Example: { StrinValue: \"0x010100C5...\" }",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "Title:": {
        "descr": "Example: { StrinValue: \"0x010100C5...\" }",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "UniqueId:": {
        "descr": "Example: \"/Guid(d5369f3b-bd7a-412a-9c0f-7f0650bb5489)/\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IOdataUser": {
    "extendsName": null,
    "descr": "Represents an OData SP.User object. For more information about this object \nsee the MSDN documentation here: \nhttps://msdn.microsoft.com/en-us/library/office/jj860569.aspx",
    "properties": {
      "Email:": {
        "descr": "Example: \"someone@example.com\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "Id:": {
        "descr": "Example: \"someone@example.com\"",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "IsSiteAdmin:": {
        "descr": "Example: \"someone@example.com\"",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "LoginName:": {
        "descr": "Example: \"i:0#.w|domain\\user\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "PrincipalType:": {
        "descr": "Example: \"i:0#.w|domain\\user\"",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "Title:": {
        "descr": "Example: \"DOMAIN\\user\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "UserId:": {
        "descr": "Example: \"DOMAIN\\user\"",
        "dataType": "IOdataUserId",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IOdataUserId": {
    "extendsName": null,
    "descr": "Represents an OData SP.UserId object. For more information about this object \nsee the MSDN documentation here: \nhttps://msdn.microsoft.com/en-us/library/office/jj860569.aspx",
    "properties": {
      "NameId:": {
        "descr": "Example: \"s-1-5-21-2127521184-1604012920-1887927527-2632426\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "NameIdIssuer:": {
        "descr": "Example: \"urn:office:idp:activedirectory\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneButtonProps": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "ariaDescription": {
        "descr": "Detailed description of the button for the benefit of screen readers. \n \nBesides the compound button, other button types will need more information provided to screen reader.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "ariaLabel": {
        "descr": "The aria label of the button for the benefit of screen readers.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "buttonType": {
        "descr": "The type of button to render.",
        "dataType": "PropertyPaneButtonType",
        "isOptional": false,
        "isCollection": false
      },
      "description": {
        "descr": "Description of the action this button takes. \nOnly used for compound buttons.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "disabled": {
        "descr": "Whether the button is disabled.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "icon": {
        "descr": "The button icon shown in command or hero type.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "text:": {
        "descr": "Display text of the element.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {
      "onClick:": {
        "descr": "for an individual element. This is because, button click does not result in any property change, and hence \ncannot fire the 'onChange'' event for a property, and ends up becoming a no-op. To avoid this, giving the \ncontrol back to the web part, so that web part can make act acordingly. \n \ntodo: VSO# 233578:PropertyPane Button OnClick event api.",
        "isOptional": false,
        "returnType": "any",
        "returnDescr": null,
        "params": [
          {
            "name": "value",
            "dataType": "any",
            "descr": "",
            "isOptional": false
          }
        ]
      }
    },
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneCheckboxProps": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "isChecked": {
        "descr": "Whether the checkbox is checked or not.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "isEnabled": {
        "descr": "Whether the checkbox is enabled or not.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "text": {
        "descr": "Label to display next to the checkbox.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneChoiceGroupOption": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "imageSrc": {
        "descr": "The src of image for choice field.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "isChecked": {
        "descr": "Whether the options is checked or not.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "isDisabled": {
        "descr": "Whether the option is disabled or not.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "key:": {
        "descr": "A required key to uniquely identify the option.",
        "dataType": "string | number",
        "isOptional": false,
        "isCollection": false
      },
      "selectedImageSrc": {
        "descr": "The src of image for choice field which is selected.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "text:": {
        "descr": "The text string for the option.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneChoiceGroupProps": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "label": {
        "descr": "Descriptive label for the choice group.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "options:": {
        "descr": "The options for the choice group.",
        "dataType": "IPropertyPaneChoiceGroupOption[]",
        "isOptional": false,
        "isCollection": true
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneCustomFieldProps": {
    "extendsName": null,
    "descr": "",
    "properties": {},
    "functions": {
      "onDispose": {
        "descr": "Event callback for onDispose.",
        "isOptional": true,
        "returnType": "void",
        "returnDescr": null,
        "params": [
          {
            "name": "elem",
            "dataType": "HTMLElement",
            "descr": "",
            "isOptional": false
          }
        ]
      },
      "onRender:": {
        "descr": "onRender will be called once the custom field mounted to the host element.",
        "isOptional": false,
        "returnType": "void",
        "returnDescr": null,
        "params": [
          {
            "name": "elem",
            "dataType": "HTMLElement",
            "descr": "",
            "isOptional": false
          }
        ]
      }
    },
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneData": {
    "extendsName": null,
    "descr": "Web part - PropertyPane data contract.",
    "properties": {
      "properties:": {
        "descr": "Property bag from the web part.",
        "dataType": "any",
        "isOptional": false,
        "isCollection": false
      },
      "settings:": {
        "descr": "Web part configuration settings.",
        "dataType": "IPropertyPaneSettings",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {
      "onClose:": {
        "descr": "Event callback for 'Close' click.",
        "isOptional": false,
        "returnType": "void",
        "returnDescr": null,
        "params": []
      },
      "onConfigurationComplete:": {
        "descr": "Event callback fired when the configuration is completed for the web part.",
        "isOptional": false,
        "returnType": "void",
        "returnDescr": null,
        "params": []
      },
      "onLostFocus:": {
        "descr": "Event callback fired when the focus is handed back to the web part",
        "isOptional": false,
        "returnType": "void",
        "returnDescr": null,
        "params": []
      },
      "onPropertyChange:": {
        "descr": "Notification event fired when the property has already been validated and modified.",
        "isOptional": false,
        "returnType": "void",
        "returnDescr": null,
        "params": [
          {
            "name": "propertyName",
            "dataType": "string",
            "descr": "",
            "isOptional": false
          },
          {
            "name": "newValue",
            "dataType": "any",
            "descr": "",
            "isOptional": false
          }
        ]
      },
      "onRendered:": {
        "descr": "Event callback fired after the PropertyPane is rendered.",
        "isOptional": false,
        "returnType": "void",
        "returnDescr": null,
        "params": []
      },
      "onSave:": {
        "descr": "Event callback for 'Apply' click.",
        "isOptional": false,
        "returnType": "void",
        "returnDescr": null,
        "params": []
      }
    },
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneDropdownOption": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "index": {
        "descr": "Index for this option.",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "isSelected": {
        "descr": "Whether this option is currently selected.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "key:": {
        "descr": "A key to uniquely identify this option.",
        "dataType": "string | number",
        "isOptional": false,
        "isCollection": false
      },
      "text:": {
        "descr": "Text to render for this option.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneDropdownProps": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "isDisabled": {
        "descr": "Whether or not the Dropdown is disabled.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "label:": {
        "descr": "Descriptive label for the Dropdown.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "options": {
        "descr": "Collection of options for this Dropdown.",
        "dataType": "IPropertyPaneDropdownOption[]",
        "isOptional": false,
        "isCollection": false
      },
      "selectedKey": {
        "descr": "The key of the initially selected option.",
        "dataType": "string | number",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneField<TProperties>": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "properties:": {
        "descr": "Strongly typed properties object. Specific to each field type. \nExample: Checkbox has ICheckboxProps, TextField has ITextField props. \n \n",
        "dataType": "TProperties",
        "isOptional": false,
        "isCollection": false
      },
      "targetProperty:": {
        "descr": "Target property from the web part's property bag.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "type:": {
        "descr": "Type of the PropertyPane field.",
        "dataType": "IPropertyPaneFieldType",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneGroup": {
    "extendsName": null,
    "descr": "PropertyPane group. Group is part of the PropertyPanePage.",
    "properties": {
      "groupFields:": {
        "descr": "List of PropertyPane fields.",
        "dataType": "IPropertyPaneField<any>[]",
        "isOptional": false,
        "isCollection": true
      },
      "groupName": {
        "descr": "Display name for the group.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneLabelProps": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "required": {
        "descr": "Whether the associated form field is required or not. \nIf true, a red asterisk is displayed to the right of the label.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "text:": {
        "descr": "Display text fot the label.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneLinkProps": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "href:": {
        "descr": "Location to which the link is targetted to.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "popupWindowProps": {
        "descr": "The props of pop up window.",
        "dataType": "IPopupWindowProps",
        "isOptional": false,
        "isCollection": false
      },
      "target": {
        "descr": "This attribute specifies where to display the linked resource. \nFollowing values can be used: \n_self - (default) Load the response in the current page. \n_blank - Load the response into a new unnamed tab. \n_parent - Load the response in the parent of the current page. \nIf no parent exists, then this option behaves same as '_self' \n_top - Load the response into the original window.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "text:": {
        "descr": "Display text for the link.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPanePage": {
    "extendsName": null,
    "descr": "PropertyPanePage interface.",
    "properties": {
      "displayGroupsAsAccordion": {
        "descr": "Indicates whether the groups on the PropertyPanePage are displayed as accordion or not.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "groups:": {
        "descr": "List of groups to be displayed on the PropertyPane page.",
        "dataType": "IPropertyPaneGroup[]",
        "isOptional": false,
        "isCollection": true
      },
      "header": {
        "descr": "PropertyPane page header.",
        "dataType": "IPropertyPanePageHeader",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPanePageHeader": {
    "extendsName": null,
    "descr": "PropertyPane header. \nThis header remains same for all the pages.",
    "properties": {
      "description:": {
        "descr": "Header to display.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "image": {
        "descr": "Image url for the background image.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneSettings": {
    "extendsName": null,
    "descr": "Web part configuration settings",
    "properties": {
      "currentPage": {
        "descr": "Page to be displayed on the PropertyPane.",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "pages:": {
        "descr": "Total number of pages on the PropertyPane.",
        "dataType": "IPropertyPanePage[]",
        "isOptional": false,
        "isCollection": true
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneSliderProps": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "ariaLabel": {
        "descr": "A description of the Slider for the benefit of screen readers.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "disabled": {
        "descr": "Whether or not the Slider is disabled.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "label": {
        "descr": "Description label of the Slider.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "max:": {
        "descr": "The max value of the Slider.",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "min:": {
        "descr": "The min value of the Slider.",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "showValue": {
        "descr": "Whether to show the value on the right of the Slider. \nIf you want to show the value by yourself, you may want to set this value to false.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "step": {
        "descr": "The difference between the two adjacent values of the Slider.",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "value": {
        "descr": "The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events. \n",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneTextFieldProps": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "ariaLabel": {
        "descr": "Aria Label for textfield, if any.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "deferredValidationTime": {
        "descr": "Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.",
        "dataType": "number",
        "isOptional": false,
        "isCollection": false
      },
      "description": {
        "descr": "The textfield input description.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "errorMessage": {
        "descr": "Default value of the textfield, if any.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "label": {
        "descr": "Label for the textfield.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "multiline": {
        "descr": "Whether or not the textfield is a multiline textfield.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "placeholder": {
        "descr": "placeholder text to be displayed in the Textfield.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "resizable": {
        "descr": "Whether or not the multiline textfield is resizable.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "underlined": {
        "descr": "Whether or not the textfield is underlined.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "value": {
        "descr": "Current value of the textfield. Only provide this if the textfield is a controlled component where you \nare maintaining its current state.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {
      "onGetErrorMessage": {
        "descr": "The method is used to get the validation error message and determine whether the input value is valid or not. \n \nWhen it returns string: \n- If valid, it returns empty string. \n- If invalid, it returns the error message string and the text field will \nshow a red border and show an error message below the text field. \n \nWhen it returns Promise<string>: \n- The resolved value is display as error message. \n- The rejected, the value is thrown away. \n",
        "isOptional": true,
        "returnType": "string | Promise<string>",
        "returnDescr": null,
        "params": [
          {
            "name": "value",
            "dataType": "string",
            "descr": "",
            "isOptional": false
          }
        ]
      }
    },
    "objects": {},
    "methods": {}
  },
  "IPropertyPaneToggleProps": {
    "extendsName": null,
    "descr": "",
    "properties": {
      "checked": {
        "descr": "Checked state of the toggle. \nIf you are maintaining state yourself, use this property.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "disabled": {
        "descr": "Optional disabled flag.",
        "dataType": "boolean",
        "isOptional": false,
        "isCollection": false
      },
      "key": {
        "descr": "A key to uniquely identify the field.",
        "dataType": "string | number",
        "isOptional": false,
        "isCollection": false
      },
      "label:": {
        "descr": "A label for the toggle.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "offText": {
        "descr": "Test display when toggle is OFF.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "onText": {
        "descr": "Text to display when toggle is ON.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IWebPartConfigurationEventCallback": {
    "extendsName": null,
    "descr": "Configuration event callback",
    "properties": {},
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IWebPartContext": {
    "extendsName": "IClientSideComponentContext<IClientSideWebPartManifestInstance<any>>",
    "descr": "Web part context interface.",
    "properties": {
      "basicHttpClient:": {
        "descr": "BasicHttpClient instance scoped to this web part.",
        "dataType": "BasicHttpClient",
        "isOptional": false,
        "isCollection": false
      },
      "domElement:": {
        "descr": "Reference to the DOM element that hosts this client side component.",
        "dataType": "HTMLElement",
        "isOptional": false,
        "isCollection": false
      },
      "environment:": {
        "descr": "Environment that webparts are hosted in.",
        "dataType": "Environment",
        "isOptional": false,
        "isCollection": false
      },
      "host:": {
        "descr": "Web part host.",
        "dataType": "IWebPartHost",
        "isOptional": false,
        "isCollection": false
      },
      "httpClient:": {
        "descr": "HttpClient instance scoped to this web part.",
        "dataType": "HttpClient",
        "isOptional": false,
        "isCollection": false
      },
      "instanceId:": {
        "descr": "Web part instance id. This is a globally unique value.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "manifest:": {
        "descr": "Client side component manifest.",
        "dataType": "TManifest",
        "isOptional": false,
        "isCollection": false
      },
      "pageContext:": {
        "descr": "SharePoint page context.",
        "dataType": "PageContext",
        "isOptional": false,
        "isCollection": false
      },
      "serviceScope:": {
        "descr": "Service scope instance that is scoped to this particular web part.",
        "dataType": "ServiceScope",
        "isOptional": false,
        "isCollection": false
      },
      "statusRenderer:": {
        "descr": "Web part status renderer.",
        "dataType": "IClientSideWebPartStatusRenderer",
        "isOptional": false,
        "isCollection": false
      },
      "webPartTag:": {
        "descr": "Web part tag to be used for logging and telemetry.",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {
      "configureStart:": {
        "descr": "Function to open the PropertyPane to help configure this web part.",
        "isOptional": false,
        "returnType": "void",
        "returnDescr": null,
        "params": [
          {
            "name": "id",
            "dataType": "string",
            "descr": "",
            "isOptional": false
          },
          {
            "name": "propertyPaneState",
            "dataType": "PropertyPaneState",
            "descr": "",
            "isOptional": true
          }
        ]
      }
    },
    "objects": {},
    "methods": {}
  },
  "IWebPartData": {
    "extendsName": null,
    "descr": "a webpart, the output should be this structure. The structure of the 'properties' field is owned by the \nwebpart and is specific to the webpart. Each webpart can decide the set of properties it wants to \nserialialize.",
    "properties": {
      "htmlProperties": {
        "descr": "Definition: HTML markup equivalent for searchable properties and properties that need link fixup. \nformat: pseudo HTML \nmandatory: no. \ntype: string \nsupported values: a string containing pseudo HTML. \nexample: \"<div>searchable_property_value</div><link href='http://contoso.com/path_of_link.aspx' />\" \nexperimental: no",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "id:": {
        "descr": "Definition: universally unique webpart Type id. \nUsage: uniquely identify a webpart. \nRequired: yes \nType: GUID \nSupported values: any GUID \nExample: \"dbef608d-3ad5-4f8f-b139-d916f2f0a294\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "instanceId:": {
        "descr": "Definition: universally unique instance id of the webpart. A web part can have multiple instances on a page. \nThis id is expected to be universally unique accross time and page boundaries. \nhow used: used by the framework to uniquely identify an instance of a webpart. \nmandatory: yes. \ntype: string \nsupported values: a unique string. Could be GUID or other uniquely identifiable formats. \nexample: [\"dbef608d-3ad5-4f8f-b139-d916f2f0a294\"] \nexperimental: yes",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "properties": {
        "descr": "Definition: webpart specific properties. The individual webpart owns the definition of these properties. \nhow used: used by the webpart to manage its internal metadata and config data. The framework code never \ntouches these properties. \nmandatory: yes. \ntype: string \nsupported values: any JSON stringifiable object hierarchy. \nexample: { 'value': 'text value' }",
        "dataType": "any",
        "isOptional": false,
        "isCollection": false
      },
      "title:": {
        "descr": "Definition: webpart title. \nUsage: display the name of the webpart in the toolbox, webpart gallery and the page. \nRequired: yes \nType: string \nSupported values: string less than 100 characters \nExample: \"Text\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      },
      "version:": {
        "descr": "Definition: webpart version. \nUsage: versioning and evolving a webpart safely. \nRequired: yes \nType: string representing a semantic version (http://semver.org) \nSupported values: MAJOR.MINOR.PATCH \nExample: \"1.0.0\"",
        "dataType": "string",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {},
    "objects": {},
    "methods": {}
  },
  "IWebPartHost": {
    "extendsName": "IServiceScopeProvider",
    "descr": "A web part host is a component, control or a page that hosts client side web parts. \nThe web part infrastructure provides many features inbuilt e.g. an HttpClient to make \nserver requests and the SPPageContext. The porpose of this interface is not to replicate \nthose feature. This interface outlines the services and features where there needs to be \na direct interaction between the host and the web part infrastructure. This interface also \noutlines some services where the web part host may want to override the default \nimplementations provided by the infrastructure. Let us discuss some examples: \n \n- APIs like setDirty, webPartConfigurationEventCallback help the web part infrastucture \ncommunicate the fact that some web part is in a dirty state or web part communication \nevents to the host. \n \n- In future we expect that this interface will be used to provide services where the host \nmight want to override the default implemenations. e.g. \n- the web part status rendering service. The default implementation of this service \nprovides an office fabric spinny. But a certain host could easily want to show a \ndifferent spinny. \n \n- The event aggregation service. Currently the web part manager hosts a single event \nevent aggregator. But there are possibilities when a page can have multiple hosts \nand each host may want to scope its event aggregation service.",
    "properties": {
      "serviceScope:": {
        "descr": "ServiceScope provides a formalized way for components to register and consume dependencies \n(\"services\"), and to enable different implementations to be registered in different scopes. \nThis improves modularity by decoupling components from their dependencies in an extensible way. \nserviceScope: ServiceScope;",
        "dataType": "ServiceScope",
        "isOptional": false,
        "isCollection": false
      },
      "webPartConfigurationEventCallback": {
        "descr": "Web part configuration event callback.",
        "dataType": "IWebPartConfigurationEventCallback",
        "isOptional": false,
        "isCollection": false
      }
    },
    "functions": {
      "setDirty": {
        "descr": "ServiceScope provides a formalized way for components to register and consume dependencies \n(\"services\"), and to enable different implementations to be registered in different scopes. \nThis improves modularity by decoupling components from their dependencies in an extensible way. \nserviceScope: ServiceScope;",
        "isOptional": true,
        "returnType": "void",
        "returnDescr": null,
        "params": [
          {
            "name": "instanceId",
            "dataType": "string",
            "descr": "",
            "isOptional": false
          },
          {
            "name": "data",
            "dataType": "any",
            "descr": "",
            "isOptional": true
          }
        ]
      }
    },
    "objects": {},
    "methods": {}
  }
}